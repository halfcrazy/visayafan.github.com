#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+include "../../template.org"
#+title: 模块总结
* math
** e
** pi
** cos sin tan acos asin atan
** sqrt pow exp log10 log log1p
** floor ceil trunc
* random
** random()
** choice(sequence)
** randint(a, b)
   [a, b]之间任意整数
* re
** findall
   re.findall(pattern, string, flag=0)
   在string中查找所非覆盖的pattern匹配，返回值为tuple类型，每个匹配项做为一个元素
* decimal
* fraction
* struct
  p251
* copy
  p258
* itertools
** permutations
   permutations(iterable[, r]) --> permutations objects
   返回iterable中长度为r的所有排列
   例如：permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
* operator
  包含各种运算：比较、逻辑、加减乘除模等算术运算
  应用：reduce(operator.truediv, [1,2,3,4])
  注意truediv和itruediv的区别（前加i和不加i的区别）：前者是a/b，后者是a/=b
* os
** os.path
   包括多个跟目录文件相关的函数
   1. exists(path) 是否存在
   2. isfile/isdir/islink/ismount(path)
   3. getctime/getatime/getctime(path)
   4. abspath/basename/dirname
   5. splitext(path) 返回元组(root, ext)前者表路径，后者表扩展名（带.号）
   6. getsize(path) 以byte形式返回path大小
** os.access(path, mode)
   F_OK判断path是否存在，R_OK判断path是否可读，W_OK是否可写，X_OK是否可执行
* glob
  查找匹配指定模式的路径名
#+begin_src python
>>> import glob
>>> glob.glob('./[0-9].*')
['./1.gif', './2.txt']
>>> glob.glob('*.gif')
['1.gif', 'card.gif']
>>> glob.glob('?.gif')
['1.gif']
#+end_src
* time
  * class time.struct_time 成员包括：
    | tm_year  | year                                   |
    | tm_mon   | month 1-12                             |
    | tm_mday  | month day 1-31                         |
    | tm_hour  | hour 0-23                              |
    | tm_min   | minute 0-59                            |
    | tm_sec   | second 0-61                            |
    | tm_wday  | week Monday=0...Sunday=6               |
    | tm_yday  | day of the year 1-366                  |
    | tm_isdst | is daylight saving time? -1 0 1 夏令时 |
  * time.time() 以秒的形式返回自1970.1.1 00:00:00以来的时间
  * time.ctime(sec) 将秒形式的时间转化成可阅读形式的时间，例如：Fri Jul 20 22:01:19 2012
  * time.asctime([t]) 无参：以Fri Jul 20 22:01:19 2012形式返回当前时间；有参：将一个time tuple或者struct_time转化成Fri Jul 20 22:01:19 2012形式字符串(24个字符)
  * time.clock() 第一次调用返回程序运行的实际时间(以浮点数形式显示)，第二次之后调用返回第一次调用到此次调用的间隔时间(用来为程序计时)
  * time.sleep(secs) 休眠
  * time.gmtime([seconds]) 无参：将当前时间转化为一个struct_time；有参：将参数秒转化成一个struct_time
  * time.localtime([seconds]) 与gmtime相似，只是转化成当前时区的struct_time
  * time.mktime(t) 与localtime功能相反，将struct_time转化成浮点数
  * time.strftime(format[,t]) 将时间以指定格式输出"%a, %d %b %Y %H:%M:%S %Y"表式出来的时间形式为24字符的：Fri Jul 20 22:01:19 2012

* mimetypes
  mimetypes实现URL或者文件名和MIME类型[fn:1]的转换。
  ＊ mimetypes.guess_type(url) => (type, encoding) 根据扩展名来猜文件类型
* collections
** deque
* select
* random
  * shuffle(list) 将一个list中的元素重新随机排序
* functools
  * partial(func, *args, **kargs) 返回结果为函数，但此函数为经过传参后的函数
* pickle
#+begin_src python
   def load(self, filename):
        self.__data = pickle.load(open(filename, 'rb'))

   def save(self, filename):
        pickle.dump(self.__data, open(filename, 'wb'))
#+end_src  

* webbrowser
  webbrowser.open('http://google.com')可以调用默认浏览器打开网页
  webbrowser.open('/home/visayafan/.emacs')调用系统默认编辑器打开指定目录下的文件
* subprocess
  执行系统命令：
  1. subprocess.call(['ls', '-l']) 参数为列表形式，要想使用字符串形式必须加上shell=True: subprocess.call("ls -l", shell=True)，返回值为命令执行返回值
  2. proc=subprocess.Popen('ls -l', shell=True) ，需要使用returnCode=proc.wait()等待命令执行结束获得返回值
  
* urllib
  用于获取网络数据
** 获取网页内容
#+begin_src python
import urllib
url = 'http://www.pythonchallenge.com/pc/def/ocr.html'
wp = urllib.urlopen(url)
content = wp.read()
print content
#+end_src
** 下载文件
   urllib.retrieve(url,filename)
* zipfile
  此模块用来创建，读写，添加，列出zip压缩文件。
  首先用ZipFile函数打开文件，可以添加选项，r表只读，w表写，a表添加（此时如果zip文件不存在则创建一个）
#+begin_src python
#当前目录下无NewZip.zip，则创建一个并将当前目录下的.emacs文件加入到NewZip.zip中
zipfile.ZipFile('NewZip.zip', 'a').write('.emacs')
#+end_src
  可以用read方法读取指定文件，例如：
#+begin_src python
  zipfile.ZipFile('channel.zip', 'r').read('test.txt')
#+end_src
  getinfo方法返回指定文件的ZipInfo对象，可以查看信息，例如：comment
#+begin_src python
print zipfile.ZipFile.getinfo(i+'.txt').comment
#+end_src
* operator
** itemgetter
#+begin_example
返回一个可调用对象，比如: f=itemgetter(2)则当f(r)时结果是r[2],当g=itemgetter(2,3,4)则当g(r)时结果是(r[2],r[3],r[4])
#+end_example
** attrgetter
#+begin_example
同样返回一个可调用对象，f=attrgetter('name')则f(r)结果是r.name，当g=attrgetter('a','b')则g(r)结果是(r.a, r.b)
#+end_example
   sorted函数有个参数key是个函数，每个比较对象都要调用此函数：
#+begin_example
>>> student_tuples = [
        ('john', 'A', 15),
        ('jane', 'B', 12),
        ('dave', 'B', 10),
]
>>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
#+end_example
   可以利用operator.itemgetter：
#+begin_example
>>> sorted(student_tuples, key=itemgetter(2))
#+end_example
   与上面结果一样。
* Footnotes

[fn:1] MIME类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。在HTTP中，MIME类型被定义在Content-Type header中。你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。在大多数实际情况中，这个文件然后将传送给Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类型的方法是通过Response对象的ContentType属性。
#+BEGIN_HTML
<script src="../../Layout/JS/disqus-comment.js"></script>
<div id="disqus_thread">
</div>
#+END_HTML
