#+OPTIONS: "\n:t
#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+LaTeX_CLASS: cn-article
#+STYLE: <link rel="stylesheet" type="text/css" href="../style/style.css" />
##+INFOJS_OPT: view:content mouse:#cccccc toc:t ftoc:t  path:../style/org-info.js


* BASIC
  * socket是个类似file的对象，它允许程序接受请求的连接和建立发送的连接和接收数据，两台机器进行通信之前必须创建一个socket对象
  * 一个连接必须绑定在一个端口上使用客户端用来唯一标识服务器
  * 端口号0-65535，1-1023被系统保留被用来通常的网络协议
    常用端口号及其对应的协议：
    | *端口* | *协议名称*    |
    |     20 | ftp-data      |
    |     21 | ftp-control   |
    |     22 | ssh           |
    |     23 | telnet        |
    |     25 | smtp          |
    |     37 | time(tcp/udp) |
    |     53 | dns           |
    |     80 | http          |
    |    110 | pop3          |
    |    143 | imap          |
    |    161 | snmp          |
    |    443 | https         |
* asynchat
  要使用此模块，必须定义一个继承asynchat.async_chat的类，必须实现两个方法：
  1. collect_incoming_data() 只要有数据进来此方法就会被调用
  2. found_terminator() 当有终结请求时被调用
  方法：
  * async_chat.close_when_done() 在FIFO队列中压入一个None标识当writer接收到时关闭此通道
  * async_chat.discard_buffers() 丢弃IO缓冲区和FIFO队列中的数据
  * async_chat.push(data) 将数据data压到FIFO队列中等待发送
  * async_chat.found_terminator() 用户自己实现，在collect_coming_data()方法调用之前被调用以判断是否终结
  * async_chat.set_terminator(term) 设置通道的终结条件，可能是字符串，数字或None。如果是字符串，每有数据出现在输入流中时会调用found_terminator()方法来判断是否终结
  * async_chat.get_terminator() 返回term
  * async_chat.push_with_producer(producer) 压入FIFO队列中一个producer（可能有方法more(), 每次调用more()都会产生一个字符串，最后产生一个空串表数据终结），writer遇到此对象时将持续调用more()方法直到没有数据产生
  * async_chat.simple_producer(data [, buffer_size]) 产生一个producer，从data中取数据，buffer_size指定大小，默认是512字节。
* asyncore
  自定义一个继承class asyncore.dispatcher的类：
  * handle_connect() 在一个监听socket接到一个连接时调用
  * handle_close() 关闭时调用
  * handle_connect() 当连接建立时调用
  * handle_error() 当无捕获异常出现时调用
  * handle_read() 当有数据可读时调用
  * handle_wirte() 当尝试写数据时被调用
  * readable() 判断对象是否愿意读数据，此方法被调用用来判断对新来的数据handle_read()方法是否应该被调用
  * writable() 判断对象是否想写数据，此方法被调用用来判断handle_wirte()方法是否应该被调用产生输出
  * loop([timeout [, use_poll [, map [, count]]]]) 开始事件循环和处理事件
  以下方法与socket模块方法差不多：
  * d.accept() 接受连接返回 (client, addr) client是个socket对象用来接收和发送数据，addr是地址
  * d.bind((host,port)) 绑定socket到主机host的端口号port
  * d.close() 关闭socket
  * d.connect((host,port)) 连接到主机host的端口号port
  * d.create_socket(family,type) 创建新的socket，参数和socket.socket()一样
  * d.listen([backlog]) 监听
  * d.recv(size) 接收最多指定大小size的数据，空串表示客户端已经关闭了连接
  * d.send(data) 发送数据
