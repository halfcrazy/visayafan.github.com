#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+include: ../../template-toc.org
#+LaTeX_CLASS: cn-article
#+title:Emacs Trick

* 用grep在文件中查找
  可以直接在grep buffer中修改文件。
** lgrep
#+begin_quote
(lgrep REGEXP &optional FILES DIR CONFIRM)
#+end_quote
   查找指定目录DIR下指定模式文件FILES内容中符合REGEXP的文件，GREP buffer中n/p上下选择。
** grep
   指定文件中查找
#+begin_quote
grep -nH -e "pattern" filename
#+end_quote
   其中H表输出中包含文件名，n表输出中包含行号，e表紧跟模式
* 执行shell命令
  M-! 执行shell命令
  加前缀C-u执行命令的结果作用在buffer上。
  类似C-u M-|结果作用在region上
* multiple-cursors
#+begin_quote
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-S-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-c C->") 'mc/mark-all-in-region)
#+end_quote
  先选中一个region，mc/edit-lines则对该region每行都有一个光标。mc/mark-next-like-this在与region内容相同的下一处加一光标。其它函数同理。
* ace-jump-mode
#+begin_src lisp
(require 'ace-jump-mode)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
  ace-jump-mode共有3个子模式，char, word和line,默认是word，加上前缀C-u是char,两个前缀C-u C-u是line.
  word模式只匹配以输入字符开头的单词，line模式在非空行行首显示字符以便跳转到想要到的行。
* align-regexp
  满足指定正则表达式的对齐，有时对整理注释比较有用。
  其它用法：[[http://emacswiki.org/emacs/AlignCommands][EmacsWiki]]
* occur, re-builder, multi-occur, multi-occur-in-matching-buffers
  list-matching-lines是occur的别名，列出当前buffer中所有满足指定正则表达式的行。
  在进行正则替换行为确保万无一失，先检查一下，occur后输入regexp则会显示所有匹配内容。
  加前缀可以显示包含之后/之前N行的额外行。
  与occur另开一buffer显示匹配不同，re-builder实行动态匹配，即一边在RE-Builder中输入regexp一边匹配（此功能很不错）。
  在re-builder中C-c C-e可以进入子模式匹配 0―9分别代表子匹配模式，用q退出；还可以C-c TAB来选择正则表达式的语法，默认是read，此模式下需要的转义字符很多可以试下string模式。
  前面两个都是在当前buffer中匹配，而multi-occur/multi-occur-in-matching-buffers是在多个buffer中匹配
* apropos
  输入一个regexp，Emacs根据你所输入的regexp和当前buffer的内容构造出更多的regexp，也许Emacs构造的比你的更合适的。
* follow-mode
  启用该模式后，C-x 3分屏后，一个文件左右连接显示，适合阅读。
* hexl-mode
  编辑非文本文件。
* backup-by-copying-when-linked
  当文件存在硬链接时默认的备份会破坏这种链接（新建一个文件在新文件中修改，与原来链接文件的inode不同，故与原来链接文件存在链接关系的文件不会同步更新），可以修改当存在链接的时候,通过拷贝来备份，而不是写进一个新文件，故链接关系不会被破坏。
#+begin_quote
(setq backup-by-copying-when-linked t)
#+end_quote
  如果你在使用dropbox这种方法就非常有用，把想要保存在dropbox中的文件硬链接到dropbox目录下，既不占空间又能保持同步更新。

* zap-to-char
  默认绑定到M-z，删除当前位置到下一个输入字符之间的字符，有时候会很有用。
* fill-paragraph
  默认绑定到M-q，调整region,不满一行的由下一行补齐,默认宽度由fill-column变量决定。
#<<sudo>>
* =/sudo::/=
  如果你用普通用户权限打开emacs，则此时打开超级用户权限的文件是无法修改的，以超级用户重新打开一个emacs可行但考虑到emacs的启动速度，这绝对不是个好主意。
  解决办法：
:  C-x C-f /sudo::/ Enter
  之后输入密码即可以超级用户权限打开一个文件。
* 正则表达式
  Emacs中正则表达式要注意group和重复所用的括号需要转义， =\(\)= , =\{3,6\}=
  语法类包括：
#+begin_example
[:digit:]  a digit, same as [0-9]
[:upper:]  a letter in uppercase
[:space:]  a whitespace character, as defined by the syntax table
[:xdigit:] an hexadecimal digit
[:cntrl:]  a control character
[:ascii:]  an ascii character
\s-   whitespace character        \s/   character quote character
\sw   word constituent            \s$   paired delimiter         
\s_   symbol constituent          \s'   expression prefix        
\s.   punctuation character       \s<   comment starter          
\s(   open delimiter character    \s>   comment ender            
\s)   close delimiter character   \s!   generic comment delimiter
\s"   string quote character      \s|   generic string delimiter 
\s\   escape character            
#+end_example
  用re-builder查询时要又重转义即转义字符要转义，即上面的要写成\\(\\), \\{3,6\\}，即要匹配一个字面上的\需要4个\，即\\\\
  re-builder中[:digit:]在写成[和]要写2次.
#+begin_example
"\\(\\+\\|-\\)?[0-9]+\\(\\.[0-9]+\\)?"        表示一个数
"[[:digit:]]\\{3\\}"                          表示连续3个数字
#+end_example

* eshell 别名/使用.bashrc中定义的别名
  Eshell中 find-file filename即可打开文件，等价于C-x C-f filename
  可以定义别名 alias emacs 'find-file $1'，这样在eshell中emacs filename即可打开文件

  我在.bashrc中定义了许多别名，eshell的别名默认保存在 =~/.eshell/alias= 中，由变量 =eshell-aliases-file= 确定，为在方便备份我把它必为 =~/.emacs.d/eshell/alias= ，为了使eshell可以使用这些别名，可以使用下面的命令把所有在shell中可用的别名加到eshell中。
#+begin_example
cd ~/.emacs.d/eshell && cat alias > tmp && echo -e "\n" >> tmp && alias | sed -E "s/^alias ([^=]+)='(.*)'$/alias \1 \2/g; s/'\\\''/'/g;" >> tmp && sort -u tmp > alias && rm -f tmp && sed -i -e '/clc/d' -e '/^$/d'  alias && cd - >/dev/null
#+end_example
  一个很简单的正则替换，其中最后删掉clc行是因为我在shell下用clc充当clear的别名，而此命令在eshell下无效且影响我定义的另一个名为clc的eshell下的孙：
#+begin_src lisp
;; clc 清屏,在eshell中输入命令而非M-x clc
(defun eshell/clc()
  "to clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))
#+end_src
  
* Ubuntu安装Emacs24.2及配置CEDET,ECB
** ./configure前需要安装的信赖包
#+begin_example
sudo apt-get install libgtk2.0-dev
sudo apt-get install libxpm-dev  
sudo apt-get install libjpeg62-dev  
sudo apt-get install libgif-dev  
sudo apt-get install libtiff4-dev  
sudo apt-get install libncurses5-dev
#+end_example
** 配置cedet, ecb
   要想使用cedet1.1和ecb2.4必须修改ecb2.4/ecb-upgrade.el中：
   1. 注释 ecb-check-requirements函数中：
#+begin_src lisp
      ;; check if vedet-version is correct
      ;; (when (or (not (boundp 'cedet-version))
      ;;           (ecb-package-version-list<
      ;;            (ecb-package-version-str2list cedet-version)
      ;;            ecb-required-cedet-version-min)
      ;;           (ecb-package-version-list<
      ;;            ecb-required-cedet-version-max
      ;;            (ecb-package-version-str2list cedet-version)))
      ;;   (setq version-error (concat "cedet ["
      ;;                               cedet-required-version-str-min
      ;;                               ", "
      ;;                               cedet-required-version-str-max
      ;;                               "]")))
#+end_src
   2. 修改：
#+begin_src lisp
(defconst ecb-required-cedet-version-max '(1 0 4 9))
为
(defconst ecb-required-cedet-version-max '(1 1 4 9))
#+end_src
   之后在ecb-2.4目录下 make CEDET=../cedet-1.1
* dired-mode下批量修改文件名
  C-x d打开一个目录后， =M-x wdired-change-to-wdired-mode= 进入可编辑模式，这样可以批量给文件改名。
#+begin_html
<link rel="stylesheet" href="../../Layout/CSS/jquery.lightbox-0.5.css" type="text/css" media="screen" />
<script type="text/javascript" src="../../Layout/JS/jquery.lightbox-0.5.js"></script>
<center> <a class="lightbox" href="./image/emacs-dired.png"> <img class="lightbox " title="jQuery.lightbox" src="./image/emacs-dired.png" width="400"> </a> </center>
d<script type="text/javascript"> $(function() {$('a.lightbox').lightBox();}); </script>
#+end_html
* Emacs中使用输入法
  可以 =M-x customize-variable RET default-input-method= 来指定默认的输入法，例如 =chinese-pinyin= 。
  默认是 =C-\= 来调用。
  下面是五笔的配置，参考http://daiyuwen.freeshell.org/gb/wubi/wubi.html
  这里设置的 =M-Space= 来调用。
#+begin_src lisp
(add-to-list 'load-path "~/.emacs.d/wubi")
(require 'wubi)
(wubi-load-local-phrases) ; add user's Wubi phrases
(register-input-method
 "chinese-wubi" "Chinese-GB" 'quail-use-package
 "WuBi" "WuBi"
 "wubi")
(setq default-input-method "chinese-wubi")
(global-set-key [?\M- ] 'toggle-input-method)
#+end_src
  这样不管机器上有没有中文输入法，只要有Emacs就可以工作。
* 乱码
  可以 =C-x RET r TAB= 来选择编码。
  中文乱码可以在.emacs中加入以下代码：
#+begin_src lisp
(prefer-coding-system 'gb18030)
#+end_src
  或：
#+begin_src lisp
(prefer-coding-system 'utf-8)
(prefer-coding-system 'chinese-gbk)
#+end_src
* Yasnippet共享
  在c mode和c++ mode下都可以使用cc mode里面的yasnippet，其方法是在 snippet/c-mode和snippet/c++-mode目录下均存在.yas-parents其内容均为cc-mode。
这样便省去了重复定制yasnippet。
* Yasnippet中使用elisp制定模板
  yasnippet模板中``之间的elisp语句会被编译后替代原来代码，我每次写文章时打开一个org mode的新buffer时，首先要在文件头部包含一些相同的内容，例如：#+include "../../template.org" 其中../../template.org包含一些CSS控制文件，这些内容是固定不变的，所以直接写在yasnippet模板里就可以，但有些东西，例如标题，是与当前文件有关的，此时可以用elisp来实现动态插入标题：
: # -*- mode: snippet -*-
: # name: template
: # --
: #+OPTIONS: ^:{} _:{} num:t toc:t \n:t
: #+include "../../template.org"
: #+title:`(replace-regexp-in-string "\.org" "" (file-name-nondirectory (buffer-file-name (window-buffer (minibuffer-selected-window)))))`$0
  还可以写得更复杂一些，例如：我在文章最下面的查看Org源码button：
: #+html:<a class="btn btn-primary" href="`(funcall (lambda (filepath)
:            (if (eq system-type 'gnu/linux)
:                (if (string-match "Dropbox" filepath)
:                    (replace-regexp-in-string "/home/visayafan/Dropbox/visayafan\.github\.com" "https://raw.github.com/visayafan/visayafan.github.com/master" filepath)
:                  (replace-regexp-in-string "/home/visayafan/visayafan\.github\.com" "https://raw.github.com/visayafan/visayafan.github.com/master" filepath))
:              (replace-regexp-in-string "D:/Dropbox/visayafan\.github\.com" "https://raw.github.com/visayafan/visayafan.github.com/master" filepath)
:              ))
:          (buffer-file-name (window-buffer (minibuffer-selected-window))))`">查看Org源码</a>
  由于我在linux和windows下博客路径不同，所以其中有个判断语句；然后替换掉路径中的部分内容使其成为github上的链接。
* eshell命令大小写不敏感
  需要修改变量eshell-glob-case-insensitive为nil，可以用customize-variable来修改，也可以在配置文件中加上：
#+begin_src lisp
(custom-set-variables
 '(eshell-glob-case-insensitive nil)
)
  另外Win下在Eshell中输入目录回车自动cd。
#+end_src
* win7下find问题
  尽管安装了GNUWin32但使用rgrep时仍然出问题，其实问题在于Win7自带的find命令，把system32下的find.exe改个名即可
* CC-Mode
  [[./CC-Mode.html][CC-Mode]]
* Emacs Client启动后字体不正常和tabber不能使用解决办法
#+begin_src lisp
;; 解决emacs client字体问题
(setq window-system-default-frame-alist
      '((x
         (font . "-unknown-文泉驿等宽微米黑-normal-normal-normal-*-12-*-*-*-*-0-iso10646-1"))
        (nil
         (font . "-unknown-文泉驿等宽微米黑-normal-normal-normal-*-12-*-*-*-*-0-iso10646-1")
         (menu-bar-lines . 0) (tool-bar-lines . 0))))

;; http://emacswiki.org/emacs/TabBarMode 上抄来的代码，解决emacsclient下tabber不能使用问题

;; Allow tab-bar-mode to be frame-local.  This is deprecated and exploits
;; the fact that `default-header-line-format' is an alias of the global
;; value of `header-line-format'. Tested with Emacs 24.1.
(make-variable-frame-local 'default-header-line-format)
;; These two are needed as the aliased frame-local value isn't recognized
;; unless the variable is explicitly accessed once. Do so on those two
;; occasions where this matters. Notably, `handle-switch-frame' need not
;; be advised.
(defadvice select-frame (after adapt-select-frame-parameters activate)
  "Fix frame-local value of `default-header-line-format'."
  (interactive)
  default-header-line-format)
;; This absolutely must be after delete-frame, so
;; `delete-frame-functions' won't work.
(defadvice delete-frame (after adapt-delete-frame-parameters activate)
  "Fix frame-local value of `default-header-line-format'."
  (interactive)
  default-header-line-format)
;; Example usage: Set per-terminal (frame-local) options.
(defun customize-terminal-frame (frame)
  (cond
   ((frame-parameter frame 'window-system)
    (set-frame-parameter frame 'default-header-line-format '(:eval (tabbar-line)))
    (tabbar-init-tabsets-store))
   (t
    (set-frame-parameter frame 'default-header-line-format nil)
    (set-frame-parameter frame 'menu-bar-lines 0))))
(add-hook 'after-make-frame-functions 'customize-terminal-frame)
#+end_src
* Emacs Gnus 阅读新闻组
  [[./EmacsGnus.html][配置+使用]]
* Emacs Org-Mode 写文章做笔记
  [[./EmacsOrg.html][配置+使用]]
* Emacs 搜索总结
- 搜索内容都是小写字母，搜索时不区分大小写；搜索内容只要有一个大写字母，搜索时区分大小写
- C-s C-w：以光标后的一个单词(自动转为小写)做为搜索词立即开始搜索以下操作要在搜索开始后，才有效
- C-w(isearch-yank-word-or-char)：从buffer中取得char或word粘贴到搜索词之后
- C-y(isearch-yank-line)：从buffer中取得一行粘贴到搜索词之后
- C-s C-w：以光标后的一个单词(自动转为小写)做为搜索词立即开始搜索
- M-c(isearch-toggle-case-fold)：打开或关毕搜索大小写敏感
- M-e(isearch-edit-string)：光标跳到minibuffer，修改搜索词
- M-n(isearch-ring-advance)：搜索时循环查找后面的搜索词
- M-p(isearch-ring-retreat)：搜索时循环查找前面的搜索词
- M-r(isearch-toggle-regexp)：打开或关闭正则方式搜索
- M-s w(isearch-toggle-word)：以单词方式搜索
- M-y(isearch-yank-kill)：将kill ring中的内容放到搜索词中
- C-M-w 删除搜索词中最后一个字符
- C-M-y 将当前光标后一个字符复制到搜索词后

* Emacs Compile 出现乱码
  编译的时候出现 /new.cc: In function â\200\230int main()â\200\231:/ 之类。
  [[http://stackoverflow.com/questions/10374200/shell-in-emacs-displays-names-of-variables-by-preceding-them-200-230][解决办法]]
#+begin_src lisp
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src
* Emacs M-x 目录操作
  =copy-directory=
  =delete-directory=
  =make-directroy=
  =list-directory=
  操作可以在eshell下完成，不过对于不想离开当前buffer的情况下这直接运行上面命令的方式也是很高效的.
* 查看当前buffer所有mode帮助信息
  =C-h m=
* 利用CEDET生成UML
  在C++文件中菜单 cedet->UML->autogenerate UML chart for class 输入类名则会生成相应的dot文件并调用graphviz来编译生成对应的图片。
  自动生成的图片感觉有些问题，可以安装 graphviz-dot-mode，在生成的dot文件上 C-c c编译 C-c p生成对应的图片。
* 颜色
  =M-x list-color-display= 查看颜色及对应的RGB值
