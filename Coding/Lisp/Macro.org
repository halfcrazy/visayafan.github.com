#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+INCLUDE "../../template-toc.org"
#+SETUPFILE: "../../extension.org"
#+title:Macro
* 编译期/执行期
#+begin_src lisp
CL-USER> (defmacro test (x)
           (let ((len (length x)))
             `(princ ,len)))
TEST
CL-USER> (test '(1 2 3))
2
#+end_src
  =(test '(1 2 3))= test是macro，编译期展开，传递给宏test的是(quote (1 2 3))是个2元列表，又(length x)并没有在'内，所以会在编译期的时候被求值，结果为2。
#+begin_src lisp
CL-USER> (defmacro test (a)
           `(princ (length ,a)))
TEST
CL-USER> (macroexpand-1 '(test '(1 2 3)))
(PRINC (LENGTH '(1 2 3)))
CL-USER> (test '(1 2 3))
3
#+end_src
  length函数的执行被放到执行期，函数求值参数首先会被求值， =(quote (1 2 3))= 求值结果为列表 =(1 2 3)= 长度为3。
#+begin_src lisp
CL-USER> (defmacro test (a)
           `(princ ,(length a)))
TEST
CL-USER> (macroexpand-1 '(test '(1 2 3)))
(PRINC 2)
T
CL-USER> (macroexpand-1 '(test (1 2 3)))
(PRINC 3)
T
#+end_src
  length在编译期求值，参数为'(1 2 3) 此时a是列表 =(quote (1 2 3))= 长度为2。参数为(1 2 3)时a是列表(1 2 3)长度为3。
* 反引号与引号的区别
  如果引号后跟的表达式没有逗号则一样。表示执行时原样返回后跟的表达式。
#+begin_src lisp
'(1 2 3) ==> `(1 2 3)
#+end_src
  都是一个有2个元素的列表(quote (1 2 3))，执行时生成(1 2 3)。
  反引号后面的表达式中可以有逗号表示逗号后跟的表达式需要求值，没有逗号的原样返回。
#+begin_src lisp
(setq b '(1 2 3))
'(a b c)  =>运行结果 (a b c)
`(a ,b c) => 运行结果 (a (1 2 3) c)
#+end_src  
#+begin_src lisp
(mapcar #'funcall `(,(lambda (x) (- x 2)) 1-) '(2 2)) => (0 1)
#+end_src
  上面语句需要 =(lambda (x) (- x 2))= 的返回的函数对象做为第1个元素做为funcall的第1个参数，此时不能用引号，只能用反引号（使用引号传递给funcall第1个参数是个列表而非函数对象）。
