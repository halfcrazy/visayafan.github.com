#+OPTIONS: ^:{} _:{} num:t toc:t \n:t
#+include "../../template.org"
#+title: IEE754中浮点数表示正负无穷

float在c中为32位，采用的存储方式为IEE754规定的方式，具体为：
最高1位为符号位，接下8位为阶码，采用的方法是移码，接下23位为尾数，采用的方法是原码表示法，其中最高位1被省略掉。
阶码移码表示是通过加上2^7-1即127（7个1）。
尾数规格化后最高位为1，被省略掉以来扩大表示范围和精度。
当阶码全是1时，理论上应该是2^9-1-127=128,表示大小为 1.尾数*2^128，但实际中并非如此，而是规定阶码全为1表示无穷大，符号位为正时表正无穷，表示为NaN，为负时表负无穷，为-NaN.

#+begin_src c
#include <stdio.h>
int main(int argc, char *argv[])
{
    float f, *p=&f;
    *((char*)(p)+2) = 0b10000000;
    *((char*)(p)+3) = 0b01111111;
    printf("%f\n",f);
    *((char*)(p)+3) = 0b11111111;
    printf("%f",f);
    return 0;
}
#+end_src

上面程序先设置符号位为0，阶码全为1得到结果为NaN，之后更改符号位为1得到-NaN。
因为f未初始化，所以其最低两个字节的存储内容是随机的，故可得证上面结论。[fn:1]

* Footnotes

[fn:1] Intel的86系列机采用小端字节序，即低字节存储在低位上。如果是大端字节序则应该将程序中的索引2改为1，3改为0.

#+BEGIN_HTML
<script src="../../Layout/JS/disqus-comment.js"></script>
<div id="disqus_thread">
</div>
#+END_HTML
